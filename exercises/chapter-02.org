#+Title: Chapter 02: starting out
#+property: header-args :exports both 


** Find the penultimate element in list l

    #+begin_src haskell :exports both  
      :set +m
      {
        penultimate :: [a] -> a
        penultimate = last . init
      }
      penultimate [1,2,3,4,5,6]
    #+end_src

    #+RESULTS:
    : 5

** Find the element at index k in list l
    #+begin_src haskell :exports both 
      :set +m
      {
        findEl :: Int -> [b] -> b
        findEl idx list = list !! idx
      }
      findEl 3 ["zero", "one", "two", "three"]
    #+end_src

    #+RESULTS:
    : three

** Determine if list l is a palindrome
    #+begin_src haskell :exports both 
      :set +m
      {
        isPalindrome :: (Eq l) =>  [l] -> Bool
        isPalindrome list = list == (reverse list)
        }

      map isPalindrome [[1,2,1], [1,2,3,2,1], [1,1,1], [1,2,3]]
        #+end_src 

    #+RESULTS:
    : *Main> [True,True,True,False]
    
** Duplicate the elements in list xs
   for example "duplicate [1,2,3]" would give the list [1,1,2,2,3,3]
   #+begin_src haskell :exports both 
      :set +m
      {
        duplicateList :: [l] -> [l]
        duplicateList [] = []
        duplicateList (x:xs) = x:x:(duplicateList xs)
       }
      duplicateList [1,2,3]
    #+end_src

    #+RESULTS:
    | 1 | 1 | 2 | 2 | 3 | 3 |

** Implement zip
    #+begin_src haskell :exports both 
      :set +m
      {
        zip' :: [a] -> [b] -> [(a,b)]
        zip' [] _ = []
        zip' _ [] = []
        zip' (x:xs) (y:ys) = (x,y):(zip xs ys)
        }

      zip' [1,2,3,4] ['a' , 'b' , 'c']
    #+end_src

    #+RESULTS:
    : *Main> [(1,'a'),(2,'b'),(3,'c')]

** Split a list l at element k into a tuple
    The first part up to and including k, the second part after k
    For example "splitAtIndex 3 [1,1,1,2,2,2]" returns ([1,1,1],[2,2,2])
   
    #+begin_src haskell :exports both
      splitAtIndex :: Int -> [a] -> ([a], [a])
      splitAtIndex idx list = ((take idx list), (drop idx list))

      splitAtIndex 3 [1,1,1,2,2,2]
    #+end_src

 #+RESULTS:
 : *Main> *Main> ([1,1,1],[2,2,2])

** Drop the element at index k in list l
    #+begin_src haskell :exports both
      dropEl :: Int -> [a] -> [a]
      dropEl idx list = let firstPart = take idx list
                            secondPart = drop (idx + 1) list
                        in firstPart ++ secondPart

      dropEl 3 [0,1,2,3,4,5]
 #+end_src

 #+RESULTS:
 : *Main| *Main| *Main> *Main> [0,1,2,4,5]

** Get sublist given two indexes
    Extract elements between ith and kth element in list l. Including i, but not k
    For example, "slice 3 6 [0,0,0,1,2,3,0,0,0]" returns [1,2,3]

    #+begin_src haskell :exports both
      sublist :: Int -> Int -> [a] -> [a]
      sublist init final list = (take ((length list) - final)) . (drop init) $ list

      sublist 3 6 [0,0,0,1,2,3,0,0,0]
 #+end_src

 #+RESULTS:
 : *Main> *Main> [1,2,3]

** Insert element in list at given index
    #+begin_src haskell :exports both
      insertAtPoint :: Int -> a -> [a] -> [a]
      insertAtPoint idx el list = let init = take idx list
                                      end = drop idx list
                                  in init ++ el:end

      insertAtPoint 3 "3" ["0", "1", "2", "4", "5"]
 #+end_src

 #+RESULTS:
 : *Main| *Main| *Main> *Main> ["0","1","2","3","4","5"]

** Rotate list n times
*** Rotate left   
     #+begin_src haskell :exports both
       :set +m
       {
       rotateListLeft :: Int -> [a] -> [a]
       rotateListLeft n list = let realRotationNumber = mod n (length list)
                                   newInit = drop realRotationNumber list
                                   newEnd = take realRotationNumber list
                               in newInit ++ newEnd
       }
       map (\n -> rotateListLeft n [1,2,3,4,5]) [1,2,3,4,5]
     #+end_src

     #+RESULTS:
     | 2 | 3 | 4 | 5 | 1 |
     | 3 | 4 | 5 | 1 | 2 |
     | 4 | 5 | 1 | 2 | 3 |
     | 5 | 1 | 2 | 3 | 4 |
     | 1 | 2 | 3 | 4 | 5 |


